//DTO using [class-validato] https://www.npmjs.com/package/class-validator
// all DTOS were placed in this class to allow for one time imports from "class-validator"
import {IsString,MinLength,IsInt,IsBoolean, IsEmail,IsDate, IsNotEmpty, IsOptional, Length, MaxLength,validate,validateOrReject } from "class-validator";

export async function isValidDTO(dto:any,Validate1Field:boolean=false) {
  let vresult;
  if(Validate1Field)
    vresult = await validate(dto, { skipMissingProperties: true });//https://stackoverflow.com/a/66703740/5826992
  else  
    vresult = await validate(dto);

  if(vresult.length>0)
  {
    return {hasErrors:true,errors:vresult};
  }
  else{
    return {hasErrors:false,errors:vresult}
  }
}
export async function isValidDTOField(dto:any) {
  let vresult = await validate(dto, { skipMissingProperties: true });
  if(vresult.length>0)
  {
    return {hasErrors:true,errors:vresult};
  }
  else{
    return {hasErrors:false,errors:vresult}
  }
}
export function failureResponse(error:any,message:string) {
  let r = new ResponseObj();
  r.IsSuccess=false;
  r.message=message;
  r.errors=error;
  r.result=[];
  return r;
}
export function successResponse(results:any,message:string) {
  let r = new ResponseObj();
  r.IsSuccess=true;
  r.message=message;
  r.errors=[];
  r.result=results;
  return r;
}
export class UserRegistrationDTO {//accountDetails sent from the client when registering, id is not needed since its autogenerated
    @IsNotEmpty()
    @MaxLength(100, {message: 'Firstname Max length is 100 characters.'})
    firstname: string;

    @IsNotEmpty()
    @MaxLength(100, {message: 'Lastname Max length is 100 characters.'})
    lastname: string;

    // @IsNotEmpty()
    @MaxLength(240, {message: 'Email Max length is 240 characters.'})
    @IsEmail()
    email: string;//email is usually the prefered username, and is important info in determining if real user, minimizing spam accounts

    @MaxLength(240, {message: 'Phone Max length is 240 characters.'})
    phone: string;

    @IsNotEmpty()
    @IsString()
    @MinLength(11, {message: 'Password Min length is 11 characters.'})
    password: string;

    @IsNotEmpty()
    @IsString()
    @MinLength(11, {message: 'Password Min length is 11 characters.'})
    @MaxLength(25, {message: 'Password Max length is 25 characters.'})
    passwordconfirm: string;// compared with password for the purpose of password confirmation

    createdat:Date

  }
  export class UserLogInDTO {//accountDetails sent from the client when registering, id is not needed since its autogenerated
   
    @IsNotEmpty()
    @MaxLength(240, {message: 'Email Max length is 240 characters.'})
    @IsEmail()
    email: string;

    @IsNotEmpty()
    password: string;// excluded validations regarding IsString and MinLength to deter password guessing

  }
  export class ResponseObj {// generic object returned to developer using the api, only results object should be used to send/forward to clients
   
    @IsNotEmpty()
    @IsBoolean()
    IsSuccess: boolean;
    
    @IsString()
    message:string;// contain a summary of the response, message will vary based on IsSuccess whether true or false
    
    errors:any;//if IsSuccess is false then the errors field will be populated and results will be empty and vice versa
    result: any;// Only populated if IsSuccess is true, contains response from api containing data from db

  }
  export class UserResponseDTO {//accountDetails returned for an authorized user, sensitive info such as password is excluded from this object
    

    @IsNotEmpty()
    @MaxLength(100, {message: 'Firstname Max length is 100 characters.'})
    firstname: string;

    @IsNotEmpty()
    @MaxLength(100, {message: 'Lastname Max length is 100 characters.'})
    lastname: string;

    @IsNotEmpty()
    @MaxLength(240, {message: 'Email Max length is 240 characters.'})
    @IsEmail()
    email: string;

    @MaxLength(240, {message: 'Phone Max length is 240 characters.'})
    phone: string;

    @IsBoolean()
    emailconfirmed: boolean;

    @IsInt()
    accessfailedcount: number;

    @IsDate()
    lockoutend:Date

    @IsString()
    token:any

    @IsInt()
    id: number;
  }